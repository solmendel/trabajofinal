from flask import Flask, request, jsonify
import mysql.connector

app = Flask(__name__)

# Configuración de la conexión a la base de datos
db = mysql.connector.connect(
    host="localhost",
    user="tu_usuario",
    password="tu_contraseña",
    database="viajes"
)

# Ruta para obtener todos los paquetes de viajes
@app.route('/paquetes', methods=['GET'])
def obtener_paquetes():
    cursor = db.cursor()
    cursor.execute("SELECT * FROM paquetes")
    paquetes = cursor.fetchall()
    cursor.close()
    return jsonify(paquetes)

# Ruta para obtener un paquete de viaje específico
@app.route('/paquetes/<int:paquete_id>', methods=['GET'])
def obtener_paquete(paquete_id):
    cursor = db.cursor()
    cursor.execute("SELECT * FROM paquetes WHERE id = %s", (paquete_id,))
    paquete = cursor.fetchone()
    cursor.close()
    if paquete:
        return jsonify(paquete)
    else:
        return jsonify({'error': 'Paquete no encontrado'}), 404

# Ruta para crear un nuevo paquete de viaje
@app.route('/paquetes', methods=['POST'])
def crear_paquete():
    nuevo_paquete = request.get_json()
    cursor = db.cursor()
    cursor.execute("INSERT INTO paquetes (destino, edad_minima, fecha, mes, año, presupuesto) VALUES (%s, %s, %s, %s, %s, %s)",
                   (nuevo_paquete['destino'], nuevo_paquete['edad_minima'], nuevo_paquete['fecha'], nuevo_paquete['mes'], nuevo_paquete['año'], nuevo_paquete['presupuesto']))
    db.commit()
    nuevo_paquete_id = cursor.lastrowid
    cursor.close()
    return jsonify({'id': nuevo_paquete_id, 'message': 'Paquete creado correctamente'}), 201

# Ruta para actualizar un paquete de viaje existente
@app.route('/paquetes/<int:paquete_id>', methods=['PUT'])
def actualizar_paquete(paquete_id):
    paquete_actualizado = request.get_json()
    cursor = db.cursor()
    cursor.execute("UPDATE paquetes SET destino = %s, edad_minima = %s, fecha = %s, mes = %s, año = %s, presupuesto = %s WHERE id = %s",
                   (paquete_actualizado['destino'], paquete_actualizado['edad_minima'], paquete_actualizado['fecha'], paquete_actualizado['mes'], paquete_actualizado['año'], paquete_actualizado['presupuesto'], paquete_id))
    db.commit()
    cursor.close()
    return jsonify({'message': 'Paquete actualizado correctamente'})

# Ruta para eliminar un paquete de viaje
@app.route('/paquetes/<int:paquete_id>', methods=['DELETE'])
def eliminar_paquete(paquete_id):
    cursor = db.cursor()
    cursor.execute("DELETE FROM paquetes WHERE id = %s", (paquete_id,))
    db.commit()
    cursor.close()
    return jsonify({'message': 'Paquete eliminado correctamente'})

if __name__ == '__main__':
    app.run()
